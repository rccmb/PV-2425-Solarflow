@model SolarflowClient.Models.HomeViewModel;

@{
    ViewData["Title"] = "Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="~/css/dashboard/dashboard.css" asp-append-version="true">
</head>
<body>
<div id="dashboard">
    <!-- Dashboard Header -->
    <div id="dashboard-header">
        <div>
            <h1>@ViewData["Title"]</h1>
            <small>Last Update: <span id="last-update">Loading...</span></small>
        </div>
        <div>
            <a href="#" id="refresh-icon" title="Refresh Data">
                <i class="fas fa-sync-alt"></i>
            </a>
            <a href="#" id="filter-icon" title="Filter Options">
                <i class="fas fa-filter"></i>
            </a>
            <a href="@Url.Action("Export", "Home")" id="settings-icon" title="Export CSV">
                <i class="fas fa-cog"></i>
            </a>
        </div>
    </div>
    
    <!-- Battery Info Section -->
    <div class="dashboard-section">
        <h2>Battery Status</h2>
        @if (Model.Battery != null)
        {
            <ul>
                <li><strong>Charging Source:</strong> @Model.Battery.ChargingSource</li>
                <li><strong>Battery Mode:</strong> @Model.Battery.BatteryMode</li>
                <li><strong>Min Threshold:</strong> @Model.Battery.MinimalTreshold</li>
                <li><strong>Max Threshold:</strong> @Model.Battery.MaximumTreshold</li>
                <li><strong>Spending Start:</strong> @Model.Battery.SpendingStartTime</li>
                <li><strong>Spending End:</strong> @Model.Battery.SpendingEndTime</li>
            </ul>
        }
        else
        {
            <p>No battery data available.</p>
        }
    </div>

    <!-- Energy Records Table -->
    <div class="dashboard-section">
        <h2>Energy Records</h2>
        @if (Model.EnergyRecords != null && Model.EnergyRecords.Any())
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Time</th>
                    <th>Solar (kWh)</th>
                    <th>Battery (kWh)</th>
                    <th>Grid (kWh)</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var record in Model.EnergyRecords)
                {
                    <tr>
                        <td>@record.Timestamp.ToString("g")</td>
                        <td>@record.Solar</td>
                        <td>@record.Battery</td>
                        <td>@record.Grid</td>
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            <p>No energy records available.</p>
        }
    </div>

    <!-- Dashboard Filters -->
    <div id="dashboard-filters">
        <div class="dashboard-filter-item">
            <label>Start Date</label>
            <input type="date" value="2024-12-01">
        </div>
        <div class="dashboard-filter-item">
            <label>End Date</label>
            <input type="date" value="2024-12-31">
        </div>
        <div class="dashboard-filter-item">
            <label>Time Measurement</label>
            <select>
                <option>Days</option>
                <option>Weeks</option>
            </select>
        </div>
        <div class="dashboard-filter-item">
            <label>Source</label>
            <select>
                <option>All</option>
            </select>
        </div>
        <div class="filter-group">
            <button id="apply-filters">✔</button>
        </div>
    </div>

    <!-- Dashboard Charts -->
    <div id="dashboard-charts">
        <div id="dashboard-charts-energy">
            <div class="chart-item">
                <h2>Energy Usage</h2>
                <p id="energy-usage">Loading...</p>
            </div>
            <div class="chart-item">
                <h2>Weather Prevision</h2>
                <img id="weather-image" alt="Weather Icon">
            </div>
            <div class="chart-item">
                <h2>Battery Status</h2>
                <div>
                    <canvas id="batteryChart"></canvas>
                </div>
            </div>
            <div class="chart-item">
                <h2>Solar Prevision</h2>
                <div>
                    <canvas id="previsionChart"></canvas>
                </div>
            </div>
            <div class="chart-item">
                <h2>Gains vs. Consumption</h2>
                <div>
                    <canvas id="consumptionChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
        document.addEventListener('DOMContentLoaded', function () {
            loadDashboardData();
            loadWeatherImage();
            loadPrevisionChart();
            loadConsumptionChart();
            loadBatteryChart();

            // On window resize, let Chart.js handle resizing.
            window.addEventListener("resize", function () {
                // Iterate over each canvas in case Chart.js instances need to recalc.
                document.querySelectorAll("canvas").forEach(canvas => {
                    const chartInstance = Chart.getChart(canvas);
                    if (chartInstance) {
                        chartInstance.resize();
                    }
                });
            });

            // Optional: refresh charts on clicking the refresh icon.
            document.getElementById("refresh-icon").addEventListener("click", function (event) {
                event.preventDefault();
                loadDashboardData();
                loadWeatherImage();
                loadPrevisionChart();
                loadConsumptionChart();
                loadBatteryChart();
            });
        });


        function loadDashboardData() {
            fetch('/Home/GetDashboardData')
                .then(response => response.json())
                .then(data => {
                    document.getElementById("last-update").textContent = data.lastUpdate;
                    document.getElementById("energy-usage").textContent = data.energyUsage;
                })
                .catch(error => console.error("Error loading dashboard data:", error));
        }

        function loadWeatherImage(){
            fetch('/Home/GetWeatherImage')
                .then(response => response.json())
                .then(data => {
                    document.getElementById("weather-image").src = data.imageUrl;
                })
                .catch(error => console.error("Error loading weather image:", error));
        }

        function loadPrevisionChart() {
            fetch('/Home/GetPrevisionChartData')
                .then(response => response.json())
                .then(chartData => {
                    var ctx = document.getElementById("previsionChart").getContext('2d');
                    if (window.previsionChartInstance) {
                        window.previsionChartInstance.destroy();
                    }
                    window.previsionChartInstance = new Chart(ctx, {
                        type: chartData.type,
                        data: chartData.data,
                        options: chartData.options
                    });
                })
                .catch(error => console.error("Error loading Prevision Chart:", error));
        }

        function loadConsumptionChart() {
            fetch('/Home/GetConsumptionChartData')
                .then(response => response.json())
                .then(chartData => {
                    var ctx = document.getElementById("consumptionChart").getContext('2d');
                    if (window.consumptionChartInstance) {
                        window.consumptionChartInstance.destroy();
                    }
                    window.consumptionChartInstance = new Chart(ctx, {
                        type: chartData.type,
                        data: chartData.data,
                        options: chartData.options
                    });
                })
                .catch(error => console.error("Error loading Consumption Chart:", error));
        }

        function loadBatteryChart() {
            fetch('/Home/GetBatteryChartData')
                .then(response => response.json())
                .then(chartData => {
                    var ctx = document.getElementById("batteryChart").getContext('2d');
                    if (window.batteryChartInstance) {
                        window.batteryChartInstance.destroy();
                    }
                    window.batteryChartInstance = new Chart(ctx, {
                        type: chartData.type,
                        data: chartData.data,
                        options: chartData.options
                    });
                })
                .catch(error => console.error("Error loading Battery Chart:", error));
        }
    </script>
</body>
</html>