@model HomeViewModel;

@{
    ViewData["Title"] = "Dashboard";
    ViewData["LastUpdate"] = Model.EnergyRecord?.Timestamp.ToString("yyyy-MM-dd HH:mm") ?? "No data";

    // Chart House Consumption 
    var chartHouseConsumption = Model.EnergyRecord?.House;

    // Chart Consumption vs. Production
    var chartConsumptionDate = Model.EnergyRecords?.Select(record => record.Timestamp.ToString("hh:mm")).ToList() ?? [];
    var chartConsumptionSolar = Model.EnergyRecords?.Select(record => (int)record.Solar).ToList() ?? [];
    var chartConsumptionHouse = Model.EnergyRecords?.Select(record => (int)record.House).ToList() ?? [];

    // Chart Battery Level
    var chartBatteryLevel = Model.Battery != null ? Model.Battery.ChargeLevel / (double)Model.Battery.MaxKW * 100.0 : 0;
    var (chartBatteryBackgroundColor, chartBatteryBorderColor) = chartBatteryLevel switch
    {
        >= 60.0 => ("rgba(68, 187, 164, 0.6)", "rgba(68, 187, 164, 1)"),
        >= 40.0 => ("rgba(243, 146, 55, 0.6)", "rgba(243, 146, 55, 1)"),
        _ => ("rgba(219, 83, 117, 0.6)", "rgba(219, 83, 117, 1)")
    };
}

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Solarflow - Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="~/css/dashboard/dashboard.css" asp-append-version="true">
</head>
<body>
<div id="dashboard">

    <!-- Dashboard Header -->
    <div id="dashboard-header">
        <div>
            <h1>@ViewData["Title"]</h1>
            <small>
                Last Update:
                <span id="last-update">
                    @ViewData["LastUpdate"]
                </span>
            </small>
        </div>
        <div>
            <a href="@Url.Action("Export", "Home")" id="download-icon" title="Download CSV" download>
                <i class="fas fa-download"></i>
            </a>
        </div>
    </div>

    <!-- Dashboard Filters -->
    <div id="dashboard-filters">
        <div class="dashboard-filter-item">
            <label>Start Date</label>
            <input type="date" value="2024-12-01">
        </div>
        <div class="dashboard-filter-item">
            <label>End Date</label>
            <input type="date" value="2024-12-31">
        </div>
        <div class="dashboard-filter-item">
            <label>Time Measurement</label>
            <select>
                <option>Days</option>
                <option>Weeks</option>
            </select>
        </div>
        <div class="dashboard-filter-item">
            <label>Source</label>
            <select>
                <option>All</option>
            </select>
        </div>
        <div>
            <button id="apply-filters">✔</button>
        </div>
    </div>

    <!-- Dashboard Charts -->
    <div id="dashboard-charts">
        <div id="dashboard-charts-energy">

            <!-- Current Consumption -->
            @if (Model.EnergyRecord != null)
            {
                <div class="chart-item">
                    <h2>Energy Usage</h2>
                    <p>@chartHouseConsumption kWh</p>
                </div>
            }

            <!-- Weather Icon -->
            @if (Model.Forecast != null)
            {
                <div class="chart-item">
                    <h2>Weather Prevision</h2>
                    <img id="weather-image" alt="Weather Icon">
                </div>
            }

            <!-- Battery Status (Percentage) -->
            @if (Model.Battery != null)
            {
                <div class="chart-item">
                    <h2>Battery Status</h2>
                    <canvas id="chartBattery"></canvas>
                </div>
            }

            <!-- Solar Prevision -->
            @if (Model.Forecast != null)
            {
                <div class="chart-item">
                    <h2>Solar Prevision</h2>
                    <div>
                        <canvas id="chartSolarPrevision"></canvas>
                    </div>
                </div>
            }

            <!-- Energy Consumption -->
            @if (Model.EnergyRecords != null)
            {
                <div class="chart-item">
                    <h2>Consumption vs. Production</h2>
                    <div>
                        <canvas id="chartConsumptionProduction"></canvas>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<!-- Include Chart.js -->
</body>
</html>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // Chart Battery Level
        @if (Model.Battery != null)
        {
            <text>
                    new Chart(document.getElementById('chartBattery').getContext('2d'), {
                        type: 'bar',
                        data: {
                            labels: ['Battery'],
                            datasets: [{
                                label: 'Battery Level',
                                data: [@Html.Raw(Json.Serialize((int)chartBatteryLevel))],
                                backgroundColor: @Html.Raw(Json.Serialize(chartBatteryBackgroundColor)),
                                borderColor: @Html.Raw(Json.Serialize(chartBatteryBorderColor)),
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    max: 100,
                                    ticks: { stepSize: 10 }
                                }
                            }
                        }
                    });
            </text>
        }

        @if (Model.EnergyRecords != null)
        {
            <text>
            // Chart Consumption vs. Production
            new Chart(document.getElementById('chartConsumptionProduction').getContext('2d'), {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(chartConsumptionDate)),
                    datasets: [{
                        label: 'Gains',
                        data: @Html.Raw(Json.Serialize(chartConsumptionSolar)),
                        fill: true,
                        backgroundColor: "rgba(231,187,65, 0.6)",
                        borderColor: "rgba(231,187,65, 1)",
                        borderWidth: 1
                    }, {
                        label: 'Consumption',
                        data: @Html.Raw(Json.Serialize(chartConsumptionHouse)),
                        fill: true,
                        backgroundColor: "rgba(57,62,65, 0.6)",
                        borderColor: "rgba(57,62,65, 1)",
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        </text>
        }

        // Chart Solar Prevision
        new Chart(document.getElementById('chartSolarPrevision').getContext('2d'), {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(chartConsumptionDate)),
                datasets: [{
                    label: 'Gains',
                    data: @Html.Raw(Json.Serialize(chartConsumptionSolar)),
                    fill: true,
                    backgroundColor: "rgba(231,187,65, 0.6)",
                    borderColor: "rgba(231,187,65, 1)",
                    borderWidth: 1
                }, {
                    label: 'Consumption',
                    data: @Html.Raw(Json.Serialize(chartConsumptionHouse)),
                    fill: true,
                    backgroundColor: "rgba(57,62,65, 0.6)",
                    borderColor: "rgba(57,62,65, 1)",
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });

    </script>
}