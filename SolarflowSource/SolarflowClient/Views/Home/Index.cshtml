@using SolarflowClient.Models.Enums
@model HomeViewModel;

@{
    ViewData["Title"] = "Dashboard";

    // NOW -----------------------------------------------------------------------------------------------------------------------

    // NOW Consumption 
    var nowConsumption = Math.Abs(
        (Model.LastEnergyRecord?.House ?? 0.0) +
        ((Model.LastEnergyRecord?.Battery ?? 0.0) < 0.0 ? Model.LastEnergyRecord?.Battery ?? 0.0 : 0.0));


    // NOW Forecast Icon
    var mostCommonWeatherCondition = Model.Forecast?
        .GroupBy(forecast => forecast.WeatherCondition)
        .OrderByDescending(group => group.Count())
        .Select(group => group.Key)
        .FirstOrDefault() ?? "";

    var urlForecastIcon = mostCommonWeatherCondition switch
    {
        "Partly Cloudy" => "/images/weather/partly_cloudy.png",
        "Cloudy" => "/images/weather/cloudy.png",
        "Very Cloudy" => "/images/weather/very_cloudy.png",
        _ => "/images/weather/clear.png"
    };


    // NOW Forecast
    var nowForecastDate = Model.Forecast?.Select(forecast => forecast.ForecastDate.ToString("d")).ToList() ?? [];
    var nowForecastData = Model.Forecast?.Select(forecast => forecast.SolarHoursExpected).ToList() ?? [];


    // NOW Battery Capacity Level
    var nowBatteryCapacityLevel = Model.Battery?.CapacityLevel ?? 0;
    var (nowBatteryCapacityLevelBackgroundColor, nowBatteryCapacityLevelBorderColor) = nowBatteryCapacityLevel switch
    {
        >= 60 => ("rgba(68, 187, 164, 0.6)", "rgba(68, 187, 164, 1)"),
        >= 40 => ("rgba(243, 146, 55, 0.6)", "rgba(243, 146, 55, 1)"),
        _ => ("rgba(219, 83, 117, 0.6)", "rgba(219, 83, 117, 1)")
    };


    // CHARTS --------------------------------------------------------------------------------------------------------------------

    var chartDates = Model.EnergyRecords?.Select(record => record.Timestamp.ToString("g")).ToList() ?? [];


    // CHART Balance (Production vs. Consumption)

    var chartBalanceProduction = Model.EnergyRecords?.Select(record =>
            record.Solar > 0.0 ? record.Solar : 0.0)
        .ToList() ?? [];

    var chartBalanceConsumption = Model.EnergyRecords?.Select(record =>
            record.House +
            (record.Battery < 0.0 ? record.Battery : 0.0))
        .ToList() ?? [];


    // CHART Consumption Source

    var chartConsumptionSolar = Model.EnergyRecords?.Select(record =>
        {
            var houseConsumptionSolar = Math.Min(Math.Abs(record.House), record.Solar);
            var quotaSolar = record.Solar - houseConsumptionSolar;
            var batteryCandidate = record.Battery < 0.0 ? Math.Abs(record.Battery) : 0.0;
            var batteryConsumptionSolar = Math.Min(batteryCandidate, quotaSolar);
            return houseConsumptionSolar + batteryConsumptionSolar;
        })
        .ToList() ?? [];

    var chartConsumptionBattery = Model.EnergyRecords?.Select(record =>
            record.Battery > 0.0 ? record.Battery : 0.0)
        .ToList() ?? [];

    var chartConsumptionGrid = Model.EnergyRecords?.Select(record =>
            record.Grid > 0.0 ? record.Grid : 0.0)
        .ToList() ?? [];

    // CHART Battery Source

    var chartBatterySolar = Model.EnergyRecords?.Select(record =>
        {
            var houseConsumptionSolar = Math.Min(Math.Abs(record.House), record.Solar);
            var quotaSolar = record.Solar - houseConsumptionSolar;
            var batteryCandidate = record.Battery < 0.0 ? Math.Abs(record.Battery) : 0.0;
            return Math.Min(batteryCandidate, quotaSolar);
        })
        .ToList() ?? [];

    var chartBatteryGrid = Model.EnergyRecords?
        .Zip(chartBatterySolar, (record, batterySolar) =>
        {
            var total = record.Solar + record.House + record.Grid;
            var gridValue = total > 0.0 ? total : 0.0;
            return gridValue - batterySolar;
        })
        .ToList() ?? new List<double>();

    var chartBatteryDischarge = Model.EnergyRecords?.Select(record =>
            record.Battery > 0.0 ? -record.Battery : 0.0)
        .ToList() ?? [];


    // CHART Grid Sell
    var chartGridSell = Model.EnergyRecords?.Select(record =>
            record.Grid < 0.0 ? -record.Grid : 0.0)
        .ToList() ?? [];
}

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Solarflow - Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="~/css/dashboard/dashboard.css" asp-append-version="true">
</head>
<body>
<div id="dashboard">

    <!-- Dashboard Header -->
    <div id="dashboard-header">
        <div>
            <h1>@ViewData["Title"]</h1>
            <small>
                Last Update:
                <span id="last-update">
                    @Model.LastEnergyRecord?.Timestamp.ToString("F");
                </span>
            </small>
        </div>
        <div>
            <a href="@Url.Action("Export", "Home", new { Model.Filter.StartDate, Model.Filter.EndDate, Model.Filter.TimeInterval })" id="download-icon" title="Download CSV" download>
                <i class="fas fa-download"></i>
            </a>
        </div>
    </div>


    <!-- Dashboard Charts -->
    <div id="dashboard-charts">
        <div id="dashboard-charts-energy">

            <!-- Current Consumption -->
            @if (Model.LastEnergyRecord != null)

            {
                <div class="chart-item">
                    <h2>Energy Usage</h2>
                    <p>@nowConsumption kWh</p>
                </div>
            }


            <!-- Weather Icon -->
            @if (Model.Forecast != null)
            {
                <div class="chart-item">
                    <h2>Weather Prevision</h2>
                    <img src="@urlForecastIcon" alt="@mostCommonWeatherCondition" width="100" height="100"/>
                </div>
            }


            <!-- Solar Prevision -->
            @if (Model.Forecast != null)
            {
                <div class="chart-item">
                    <h2>Solar Prevision</h2>
                    <div>
                        <canvas id="chartSolarPrevision"></canvas>
                    </div>
                </div>
            }

            <!-- Battery Status (Percentage) -->
            @if (Model.Battery != null)
            {
                <div class="chart-item">
                    <h2>Battery Status</h2>
                    <canvas id="chartBattery"></canvas>
                </div>
            }

            <div>
                <form asp-action="Index" asp-controller="Home" method="get">
                    <div id="dashboard-filters">
                        <div class="dashboard-filter-item">
                            <label asp-for="Filter.StartDate"></label>
                            <!-- Using the asp-for helper here, although you might need to adjust the format -->
                            <input asp-for="Filter.StartDate" type="datetime-local" class="form-control"/>
                        </div>
                        <div class="dashboard-filter-item">
                            <label asp-for="Filter.EndDate"></label>
                            <input asp-for="Filter.EndDate" type="datetime-local" class="form-control"/>
                        </div>
                        <div class="dashboard-filter-item">
                            <label asp-for="Filter.TimeInterval"></label>
                            <select asp-for="Filter.TimeInterval" class="form-control" asp-items="Html.GetEnumSelectList<TimeInterval>()"></select>
                        </div>
                        <button type="submit" class="btn btn-primary">Apply Filters</button>
                    </div>
                </form>
            </div>

            <!-- Energy Consumption -->
            @if (Model.EnergyRecords != null)
            {
                <div class="chart-item">
                    <h2>Solar Production / House Consumption</h2>
                    <div>
                        <canvas id="chartConsumptionProduction"></canvas>
                    </div>
                </div>
            }

            <!-- Energy Consumption -->
            @if (Model.EnergyRecords != null)
            {
                <div class="chart-item">
                    <h2>Consumption</h2>
                    <div>
                        <canvas id="chartConsumptionStacked"></canvas>
                    </div>
                </div>
            }

            <!-- Energy Consumption -->
            @if (Model.EnergyRecords != null)
            {
                <div class="chart-item">
                    <h2>Battery</h2>
                    <div>
                        <canvas id="chartBatteryCharged"></canvas>
                    </div>
                </div>
            }
            
            
            <!-- Energy Consumption -->
            @if (Model.EnergyRecords != null)
            {
                <div class="chart-item">
                    <h2>Battery Charge</h2>
                    <div>
                            <canvas id="chartGridSell"></canvas>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Include Chart.js -->
</body>
</html>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>

        // Chart Battery Level
        @if (Model.Battery != null)
        {
            <text>
                    new Chart(document.getElementById('chartBattery').getContext('2d'), {
                        type: 'bar',
                        data: {
                            labels: ['Battery'],
                            datasets: [{
                                label: 'Battery Level',
                                data: [@Html.Raw(Json.Serialize(nowBatteryCapacityLevel))],
                                backgroundColor: @Html.Raw(Json.Serialize(nowBatteryCapacityLevelBackgroundColor)),
                                borderColor: @Html.Raw(Json.Serialize(nowBatteryCapacityLevelBorderColor)),
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    max: 100,
                                    ticks: { stepSize: 10 }
                                }
                            }
                        }
                    });
            </text>
        }

        // Chart Solar Production vs. House Consumption
        @if (Model.EnergyRecords != null)
        {
            <text>
            // Chart Consumption vs. Production
                new Chart(document.getElementById('chartConsumptionProduction').getContext('2d'), {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(chartDates)),
                    datasets: [{
                        label: 'Production',
                        data: @Html.Raw(Json.Serialize(chartBalanceProduction)),
                        fill: true,
                        backgroundColor: "rgba(231,187,65, 0.6)",
                        borderColor: "rgba(231,187,65, 1)",
                        borderWidth: 1
                    }, {
                        label: 'Consumption',
                        data: @Html.Raw(Json.Serialize(chartBalanceConsumption)),
                        fill: true,
                        backgroundColor: "rgba(57,62,65, 0.6)",
                        borderColor: "rgba(57,62,65, 1)",
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                                            plugins: {
                                legend: {
                                    display: true // or false if you don't want to show dataset labels
                                }
                            }
                }
            });
        </text>
        }

        @if (Model.EnergyRecords != null)
        {
            <text>
            // Example: stacked line chart
            new Chart(document.getElementById('chartConsumptionStacked').getContext('2d'), {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(chartDates)), // e.g., timestamps or other x-axis labels
                    datasets: [
                        {
                            label: 'Grid',
                            data: @Html.Raw(Json.Serialize(chartConsumptionGrid)), 
                            fill: true,
                            backgroundColor: "rgba(0, 0, 255, 0.4)",
                            borderColor: "rgba(0, 0, 255, 1)",
                            borderWidth: 1
                        },
                        {
                            label: 'Solar',
                            data: @Html.Raw(Json.Serialize(chartConsumptionSolar)), 
                            fill: true,
                            backgroundColor: "rgba(255, 165, 0, 0.4)",
                            borderColor: "rgba(255, 165, 0, 1)",
                            borderWidth: 1
                        },
                        {
                            label: 'Battery',
                            data: @Html.Raw(Json.Serialize(chartConsumptionBattery)), 
                            fill: true,
                            backgroundColor: "rgba(0, 128, 0, 0.4)",
                            borderColor: "rgba(0, 128, 0, 1)",
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            stacked: true
                        },
                        x: {
                            // optional x-axis config
                        }
                    },
                    plugins: {
                        legend: {
                            display: true // or false if you don't want to show dataset labels
                        }
                    }
                }
            });
            </text>
        }

        @if (Model.EnergyRecords != null)
        {
            <text>
                    // Example: stacked line chart
                    new Chart(document.getElementById('chartBatteryCharged').getContext('2d'), {
                        type: 'line',
                        data: {
                            labels: @Html.Raw(Json.Serialize(chartDates)), // e.g., timestamps or other x-axis labels
                            datasets: [
                                {
                                    label: 'Charge Grid',
                                    data: @Html.Raw(Json.Serialize(chartBatteryGrid)),
                                    fill: true,
                                    backgroundColor: "rgba(0, 0, 255, 0.4)",
                                    borderColor: "rgba(0, 0, 255, 1)",
                                    borderWidth: 1,
                                    // Group this dataset with the other charging values.
                                    stack: "charges"
                                },
                                {
                                    label: 'Charge Solar',
                                    data: @Html.Raw(Json.Serialize(chartBatterySolar)),
                                    fill: true,
                                    backgroundColor: "rgba(255, 165, 0, 0.4)",
                                    borderColor: "rgba(255, 165, 0, 1)",
                                    borderWidth: 1,
                                    // Same stack group so these values are stacked together.
                                    stack: "charges"
                                },
                                {
                                    label: 'Discharge',
                                    // Multiply each value by -1 so they are rendered as negative.
                                    data: @Html.Raw(Json.Serialize(chartBatteryDischarge)),
                                    fill: true,
                                    backgroundColor: "rgba(57,62,65, 0.6)",
                                    borderColor: "rgba(57,62,65, 1)",
                                    borderWidth: 1,
                                    // Place in a separate stack group to prevent stacking with the charge datasets.
                                    stack: "discharge"
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    stacked: true  // Enable stacking on the y-axis.
                                },
                                x: {
                                    // optional x-axis config
                                }
                            },
                            plugins: {
                                legend: {
                                    display: true // Show dataset labels.
                                }
                            }
                        }
                    });
            </text>
        }

        @if (Model.EnergyRecords != null)
        {
            <text>
        new Chart(document.getElementById('chartGridSell').getContext('2d'), {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(chartDates)), // e.g., timestamps or labels for the x-axis
                datasets: [
                    {
                        label: 'Grid Sell',
                        data: @Html.Raw(Json.Serialize(chartGridSell)),
                        backgroundColor: "rgba(75, 192, 192, 0.6)",
                        borderColor: "rgba(75, 192, 192, 1)",
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    },
                    x: {
                        // optional x-axis configuration
                    }
                },
                plugins: {
                    legend: {
                        display: true
                    }
                }
            }
        });
    </text>
        }

        // Chart Solar Prevision
        new Chart(document.getElementById('chartSolarPrevision').getContext('2d'), {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(nowForecastDate)),
                datasets: [{
                    label: 'Gains',
                    data: @Html.Raw(Json.Serialize(nowForecastData)),
                    fill: true,
                    backgroundColor: "rgba(231,187,65, 0.6)",
                    borderColor: "rgba(231,187,65, 1)",
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });

    </script>
}